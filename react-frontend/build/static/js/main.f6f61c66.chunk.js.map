{"version":3,"sources":["logo.svg","components/Form.js","components/About.js","components/Title.js","components/FoundTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","state","directory","text","location","handleFormChange","bind","handleFormSubmit","event","preventDefault","data","this","updateStatus","updateResponse","fetch","method","mode","headers","body","JSON","stringify","then","res","json","console","log","links","error","inputForm","target","value","name","setState","onSubmit","Grid","container","direction","alignItems","Box","marginTop","FormControl","component","item","FormLabel","color","FormHelperText","justify","spacing","TextField","variant","label","placeholder","onChange","Button","type","Component","About","Typography","Title","p","FoundTable","hasBeenCalled","rows","length","map","link","i","TableRow","key","TableCell","align","status","CircularProgress","xs","sm","md","TableContainer","Table","TableHead","TableBody","App","isFetching","updateFetching","updateLinks","className","React","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f6f61c66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  Button,\r\n  FormHelperText,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  InputLabel,\r\n  Input,\r\n  Grid,\r\n  Typography,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\nexport default class Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      directory: \"\",\r\n      text: \"\",\r\n      location: \"\",\r\n    };\r\n\r\n    this.handleFormChange = this.handleFormChange.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n  }\r\n\r\n  async handleFormSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const data = {\r\n      directory: this.state.directory,\r\n      text: this.state.text,\r\n      location: this.state.location,\r\n    };\r\n\r\n    this.props.updateStatus(true);\r\n    this.props.updateResponse([]);\r\n    try {\r\n      fetch(\"/api/transliterate\", {\r\n        //send post request with needed data\r\n        method: \"post\",\r\n        mode: \"cors\", //sending json doesnt work with no-cors\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          //puts data into state\r\n          console.log(data.links);\r\n          this.props.updateResponse(data.links);\r\n          this.props.updateStatus(false);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.props.updateStatus(false);\r\n    }\r\n  }\r\n\r\n  handleFormChange(event) {\r\n    const inputForm = event.target;\r\n    const value = inputForm.value;\r\n    const name = inputForm.name;\r\n\r\n    this.setState({\r\n      //tracks states of input form\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleFormSubmit}>\r\n          <Grid container direction=\"column\" alignItems=\"center\">\r\n            <Box marginTop={5}>\r\n              <FormControl component=\"fieldset\">\r\n                <Grid item>\r\n                  <FormLabel component=\"legend\" color=\"secondary\">\r\n                    This app converts english text to sindhi then transliterates\r\n                    to english text so you can read sindhi without knowing the\r\n                    sindhi alphabet\r\n                  </FormLabel>\r\n                </Grid>\r\n                <Grid item />\r\n                {/* <Box marginTop={2}>\r\n                  <Grid container item xs={12}>\r\n                    <Grid item xs={2} />\r\n                    <Grid item xs={8}>\r\n                      <RadioGroup\r\n                        aria-label=\"quiz\"\r\n                        name=\"directory\"\r\n                        onChange={this.handleFormChange}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"Yellow Pages (CA)\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          disabled\r\n                          control={<Radio />}\r\n                          label=\"Yellow Pages (US)\"\r\n                        />\r\n                      </RadioGroup>\r\n                      <Grid item xs={2} />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Box> */}\r\n                <FormHelperText></FormHelperText>\r\n              </FormControl>\r\n            </Box>\r\n\r\n            <Grid container item direction=\"row\" justify=\"center\" spacing={3}>\r\n              <Grid item>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  variant=\"standard\"\r\n                  name=\"text\"\r\n                  label=\"Enter text\"\r\n                  placeholder=\"What is your name?\"\r\n                  onChange={this.handleFormChange}\r\n                ></TextField>\r\n              </Grid>\r\n            </Grid>\r\n            <Box marginTop={5}>\r\n              <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n                Submit\r\n              </Button>\r\n            </Box>\r\n          </Grid>\r\n        </form>\r\n        {/* \r\n        <form onSubmit={this.handleFormSubmit}>\r\n          <label>\r\n            YellowPages Canada\r\n            <input\r\n              type=\"radio\"\r\n              id=\"Yellowpages.ca\"\r\n              name=\"directory\"\r\n              value=\"0\"\r\n              onChange={this.handleFormChange}\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            YellowPages US\r\n            <input\r\n              type=\"radio\"\r\n              id=\"Yellowpages.com\"\r\n              name=\"directory\"\r\n              value=\"1\"\r\n              onChange={this.handleFormChange}\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <br />\r\n\r\n          <label>\r\n            What are you searching for?\r\n            <input\r\n              type=\"text\"\r\n              id=\"search\"\r\n              name=\"search\"\r\n              placeholder=\"Eg. Dental Clinic\"\r\n              onChange={this.handleFormChange}\r\n            />\r\n          </label>\r\n\r\n          <br />\r\n\r\n          <label>\r\n            Where are you searching?\r\n            <input\r\n              type=\"text\"\r\n              id=\"location\"\r\n              name=\"location\"\r\n              placeholder=\"Eg. Toronto ON\"\r\n              onChange={this.handleFormChange}\r\n            />\r\n          </label>\r\n\r\n          <br />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\n\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <Typography variant=\"overline\" component=\"p\" color=\"textSecondary\">\r\n      Learn Sindhi FASTEr\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport { Typography, Box, makeStyles } from \"@material-ui/core\";\r\nimport \"fontsource-roboto\";\r\n\r\nexport class Title extends Component {\r\n  render() {\r\n    return (\r\n      <Typography component=\"div\" variant=\"h2\" color=\"textPrimary\">\r\n        <Box marginTop={9} p={0}>\r\n          English to Sindhi\r\n        </Box>\r\n      </Typography>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Box,\r\n  CircularProgress,\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nexport class FoundTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasBeenCalled: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let rows;\r\n\r\n    if (this.props.data.length > 0) {\r\n      //builds table rows if api data is recieved\r\n      rows = this.props.data.map((link, i) => {\r\n        return (\r\n          <TableRow key={i}>\r\n            <TableCell align=\"center\">\r\n              <Typography variant=\"h6\">{link}</Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n        );\r\n      });\r\n      this.state.hasBeenCalled = true;\r\n    } else if (this.props.status === true) {\r\n      //means api is called but we are waiting on data\r\n      rows = (\r\n        <Box p={2}>\r\n          <CircularProgress />\r\n        </Box>\r\n      );\r\n      this.state.hasBeenCalled = true;\r\n    } else if (this.state.hasBeenCalled == true) {\r\n      rows = (\r\n        <TableRow>\r\n          <TableCell align=\"center\">Error. Try again</TableCell>\r\n        </TableRow>\r\n      );\r\n    } else {\r\n      // api is not called\r\n      rows = (\r\n        <TableRow>\r\n          <TableCell align=\"center\">\r\n            You haven't submitted anything. Yet...\r\n          </TableCell>\r\n        </TableRow>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Box p={4}>\r\n          <Grid container direction=\"column\">\r\n            <Grid container>\r\n              <Grid item xs={0} sm={1} md={2} />\r\n              <Grid item xs={12} sm={10} md={8} justify=\"center\">\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell align=\"center\">\r\n                          <strong>RESULTS</strong>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>{rows}</TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </Grid>\r\n              <Grid item xs={0} sm={1} md={2} />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FoundTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport Header from \"./components/Header\";\r\nimport About from \"./components/About\";\r\nimport Title from \"./components/Title\";\r\nimport FoundTable from \"./components/FoundTable\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    links: [], //scholarships links found\r\n    isFetching: false, //tracks if api is called\r\n  };\r\n\r\n  updateFetching = (status) => {\r\n    this.setState({\r\n      isFetching: status,\r\n    });\r\n    console.log(this.state.isFetching);\r\n  };\r\n\r\n  updateLinks = (data) => {\r\n    this.setState({\r\n      links: data,\r\n    });\r\n    console.log(this.state.links);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid container direction=\"column\">\r\n          <Grid container>\r\n            <Grid item xs={1} sm={2} md={3} />\r\n            <Grid item xs={10} sm={8} md={6}>\r\n              <Title />\r\n              <About />\r\n              <Form\r\n                updateResponse={this.updateLinks}\r\n                updateStatus={this.updateFetching}\r\n              />\r\n\r\n              <FoundTable\r\n                data={this.state.links}\r\n                status={this.state.isFetching}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={1} sm={2} md={3} />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}