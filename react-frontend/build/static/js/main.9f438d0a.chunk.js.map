{"version":3,"sources":["logo.svg","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","state","directory","search","location","handleFormChange","bind","handleFormSubmit","event","console","log","this","preventDefault","data","fetch","method","mode","headers","body","JSON","stringify","then","res","json","error","inputForm","target","value","name","setState","onSubmit","type","id","onChange","required","placeholder","Component","App","useState","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,gMCmI5BC,E,kDAhIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,GACXC,OAAQ,GACRC,SAAU,IAEZ,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBARP,E,sGAWIE,G,uEACrBC,QAAQC,IAAIC,KAAKV,MAAMC,WACvBM,EAAMI,iBAEAC,EAAO,CACXX,UAAWS,KAAKV,MAAMC,UACtBC,OAAQQ,KAAKV,MAAME,OACnBC,SAAUO,KAAKV,MAAMG,UAGvB,IACEU,MAAM,cAAe,CACnBC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KAEpBQ,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACR,GACLJ,QAAQC,IAAIG,MAEhB,MAAOW,GACPf,QAAQC,IAAIc,G,8IAoBChB,GACf,IAAMiB,EAAYjB,EAAMkB,OAClBC,EAAQF,EAAUE,MAClBC,EAAOH,EAAUG,KAEvBjB,KAAKkB,SAAL,eACGD,EAAOD,M,+BAKV,OACE,6BACE,wEAEA,0BAAMG,SAAUnB,KAAKJ,kBACnB,oDAEE,2BACEwB,KAAK,QACLC,GAAG,iBACHJ,KAAK,YACLD,MAAM,IACNM,SAAUtB,KAAKN,iBACf6B,UAAQ,KAIZ,gDAEE,2BACEH,KAAK,QACLC,GAAG,kBACHJ,KAAK,YACLD,MAAM,IACNM,SAAUtB,KAAKN,iBACf6B,UAAQ,KAIZ,6BAEA,6DAEE,2BACEH,KAAK,OACLC,GAAG,SACHJ,KAAK,SACLO,YAAY,oBACZF,SAAUtB,KAAKN,oBAInB,6BAEA,0DAEE,2BACE0B,KAAK,OACLC,GAAG,WACHJ,KAAK,WACLO,YAAY,iBACZF,SAAUtB,KAAKN,oBAInB,6BACA,2BAAO0B,KAAK,SAASJ,MAAM,iB,GA3HlBS,aCqBJC,MAlBf,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBAWb,OAXa,UAYX,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCNcC,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLf,QAAQe,MAAMA,EAAM+B,c","file":"static/js/main.9f438d0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      directory: \"\",\r\n      search: \"\",\r\n      location: \"\",\r\n    };\r\n    this.handleFormChange = this.handleFormChange.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n  }\r\n\r\n  async handleFormSubmit(event) {\r\n    console.log(this.state.directory);\r\n    event.preventDefault();\r\n\r\n    const data = {\r\n      directory: this.state.directory,\r\n      search: this.state.search,\r\n      location: this.state.location,\r\n    };\r\n\r\n    try {\r\n      fetch(\"/api/scrape\", {\r\n        method: \"post\",\r\n        mode: \"cors\", //sending json doesnt work with no-cors\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    // axios({\r\n    //   method: \"post\",\r\n    //   url: \"/time\",\r\n    //   data: data,\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     mode: \"cors\",\r\n    //   },\r\n    // })\r\n    //   .then(function (res) {\r\n    //     console.log(res);\r\n    //   })\r\n    //   .catch(function (e) {\r\n    //     console.log(e);\r\n    //   });\r\n  }\r\n\r\n  handleFormChange(event) {\r\n    const inputForm = event.target;\r\n    const value = inputForm.value;\r\n    const name = inputForm.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Which Directory would you like to Search?</p>\r\n\r\n        <form onSubmit={this.handleFormSubmit}>\r\n          <label>\r\n            YellowPages Canada\r\n            <input\r\n              type=\"radio\"\r\n              id=\"Yellowpages.ca\"\r\n              name=\"directory\"\r\n              value=\"0\"\r\n              onChange={this.handleFormChange}\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            YellowPages US\r\n            <input\r\n              type=\"radio\"\r\n              id=\"Yellowpages.com\"\r\n              name=\"directory\"\r\n              value=\"1\"\r\n              onChange={this.handleFormChange}\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <br />\r\n\r\n          <label>\r\n            What are you searching for?\r\n            <input\r\n              type=\"text\"\r\n              id=\"search\"\r\n              name=\"search\"\r\n              placeholder=\"Eg. Dental Clinic\"\r\n              onChange={this.handleFormChange}\r\n            />\r\n          </label>\r\n\r\n          <br />\r\n\r\n          <label>\r\n            Where are you searching?\r\n            <input\r\n              type=\"text\"\r\n              id=\"location\"\r\n              name=\"location\"\r\n              placeholder=\"Eg. Toronto ON\"\r\n              onChange={this.handleFormChange}\r\n            />\r\n          </label>\r\n\r\n          <br />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Form;\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Form from \"./Form\";\n\nfunction App() {\n  const [currentTime, setCurrentTime] = useState(0);\n\n  // useEffect(() => {\n  //   fetch(\"/time\")\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //       setCurrentTime(data.time);\n  //     });\n  // }, []);\n\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}